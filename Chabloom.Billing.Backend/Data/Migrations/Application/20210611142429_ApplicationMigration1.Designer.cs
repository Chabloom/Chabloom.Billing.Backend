// <auto-generated />
using System;
using Chabloom.Billing.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Chabloom.Billing.Backend.Data.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210611142429_ApplicationMigration1")]
    partial class ApplicationMigration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedUser")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DisabledTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DisabledUser")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("TenantLookupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedUser")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("TenantId", "TenantLookupId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c994055-dfe2-4863-a087-2b47cd2a1e25"),
                            Address = "400 W Martintown Rd",
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "400 W Martintown Rd",
                            TenantId = new Guid("a2cee23f-3250-4b1b-93dc-87443b02dd89"),
                            TenantLookupId = "12345"
                        },
                        new
                        {
                            Id = new Guid("c68ddf06-20f6-41f0-869a-6f39cd8d9431"),
                            Address = "402 W Martintown Rd",
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "402 W Martintown Rd",
                            TenantId = new Guid("a2cee23f-3250-4b1b-93dc-87443b02dd89"),
                            TenantLookupId = "12346"
                        },
                        new
                        {
                            Id = new Guid("5a79115e-2e5a-4fca-9ea1-e6a21e7de4d4"),
                            Address = "403 W Martintown Rd",
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "403 W Martintown Rd",
                            TenantId = new Guid("a2cee23f-3250-4b1b-93dc-87443b02dd89"),
                            TenantLookupId = "12347"
                        },
                        new
                        {
                            Id = new Guid("1ba99ecc-48d3-4839-b748-7565e2a72f77"),
                            Address = "404 W Martintown Rd",
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "404 W Martintown Rd",
                            TenantId = new Guid("a2cee23f-3250-4b1b-93dc-87443b02dd89"),
                            TenantLookupId = "12348"
                        },
                        new
                        {
                            Id = new Guid("31a59e75-197f-433c-b6b4-6160c6cace42"),
                            Address = "400 Richland Ave",
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "400 Richland Ave",
                            TenantId = new Guid("7ba3a979-5abf-407f-aee1-75e2d5522711"),
                            TenantLookupId = "12345"
                        },
                        new
                        {
                            Id = new Guid("d1eaffb6-5757-4fca-b15f-04ec11073275"),
                            Address = "402 Richland Ave",
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "402 Richland Ave",
                            TenantId = new Guid("7ba3a979-5abf-407f-aee1-75e2d5522711"),
                            TenantLookupId = "12346"
                        },
                        new
                        {
                            Id = new Guid("8a276669-64f9-4057-a741-10b6b5ff92b0"),
                            Address = "403 Richland Ave",
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "403 Richland Ave",
                            TenantId = new Guid("7ba3a979-5abf-407f-aee1-75e2d5522711"),
                            TenantLookupId = "12347"
                        },
                        new
                        {
                            Id = new Guid("e89ee340-96d2-49b2-a7c9-f444fb95c148"),
                            Address = "404 Richland Ave",
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "404 Richland Ave",
                            TenantId = new Guid("7ba3a979-5abf-407f-aee1-75e2d5522711"),
                            TenantLookupId = "12348"
                        });
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Accounts.UserAccount", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantUserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "AccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TenantUserId");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Bills.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedUser")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DisabledTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DisabledUser")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentScheduleId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedUser")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7690274e-c4ad-4964-9cc5-3625ccaabcca"),
                            AccountId = new Guid("0c994055-dfe2-4863-a087-2b47cd2a1e25"),
                            Amount = 4329m,
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyId = "USD",
                            DueDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "August 2021"
                        },
                        new
                        {
                            Id = new Guid("8be7e620-7f46-4460-a49a-de09b8895640"),
                            AccountId = new Guid("c68ddf06-20f6-41f0-869a-6f39cd8d9431"),
                            Amount = 5521m,
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyId = "USD",
                            DueDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "August 2021"
                        },
                        new
                        {
                            Id = new Guid("8240327d-547a-4875-92c8-b1dcfa5f13a9"),
                            AccountId = new Guid("5a79115e-2e5a-4fca-9ea1-e6a21e7de4d4"),
                            Amount = 6123m,
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyId = "USD",
                            DueDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "August 2021"
                        },
                        new
                        {
                            Id = new Guid("6eec413f-f55e-4dac-8a6d-2f38e5a04fe7"),
                            AccountId = new Guid("1ba99ecc-48d3-4839-b748-7565e2a72f77"),
                            Amount = 4591m,
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyId = "USD",
                            DueDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "August 2021"
                        },
                        new
                        {
                            Id = new Guid("eb54f672-a3aa-458c-8b4d-18cacae438d6"),
                            AccountId = new Guid("31a59e75-197f-433c-b6b4-6160c6cace42"),
                            Amount = 3371m,
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyId = "USD",
                            DueDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "August 2021"
                        },
                        new
                        {
                            Id = new Guid("b0eb88dc-c8ea-45c2-80a7-8abf5978cee5"),
                            AccountId = new Guid("d1eaffb6-5757-4fca-b15f-04ec11073275"),
                            Amount = 4252m,
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyId = "USD",
                            DueDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "August 2021"
                        },
                        new
                        {
                            Id = new Guid("61ce9459-55aa-452e-bd29-5e31913e42ff"),
                            AccountId = new Guid("8a276669-64f9-4057-a741-10b6b5ff92b0"),
                            Amount = 7622m,
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyId = "USD",
                            DueDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "August 2021"
                        },
                        new
                        {
                            Id = new Guid("27bc4cdc-e4f8-43df-a23d-4136d371254b"),
                            AccountId = new Guid("e89ee340-96d2-49b2-a7c9-f444fb95c148"),
                            Amount = 3688m,
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyId = "USD",
                            DueDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "August 2021"
                        });
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Bills.BillSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<int>("MonthInterval")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentScheduleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("BillSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be05ae00-081d-48d4-b047-e93fb7523934"),
                            AccountId = new Guid("0c994055-dfe2-4863-a087-2b47cd2a1e25"),
                            Amount = 3350m,
                            CurrencyId = "USD",
                            Day = 1,
                            MonthInterval = 1,
                            Name = "Monthly Water"
                        },
                        new
                        {
                            Id = new Guid("298aa43a-6376-4049-ae6e-6c0d1741fcc4"),
                            AccountId = new Guid("c68ddf06-20f6-41f0-869a-6f39cd8d9431"),
                            Amount = 3350m,
                            CurrencyId = "USD",
                            Day = 1,
                            MonthInterval = 1,
                            Name = "Monthly Water"
                        },
                        new
                        {
                            Id = new Guid("d28f8ec7-e716-4d5a-b0c4-832d9a1134d5"),
                            AccountId = new Guid("5a79115e-2e5a-4fca-9ea1-e6a21e7de4d4"),
                            Amount = 3350m,
                            CurrencyId = "USD",
                            Day = 1,
                            MonthInterval = 1,
                            Name = "Monthly Water"
                        },
                        new
                        {
                            Id = new Guid("38fbb0fe-b1b3-42a9-b591-88c37381e5bc"),
                            AccountId = new Guid("1ba99ecc-48d3-4839-b748-7565e2a72f77"),
                            Amount = 3350m,
                            CurrencyId = "USD",
                            Day = 1,
                            MonthInterval = 1,
                            Name = "Monthly Water"
                        },
                        new
                        {
                            Id = new Guid("600d7c6f-6b6a-4a0c-a62e-c5ed482ebc09"),
                            AccountId = new Guid("31a59e75-197f-433c-b6b4-6160c6cace42"),
                            Amount = 3350m,
                            CurrencyId = "USD",
                            Day = 1,
                            MonthInterval = 1,
                            Name = "Monthly Water"
                        },
                        new
                        {
                            Id = new Guid("35a5cc23-e120-48fe-afda-d42c26233193"),
                            AccountId = new Guid("d1eaffb6-5757-4fca-b15f-04ec11073275"),
                            Amount = 3350m,
                            CurrencyId = "USD",
                            Day = 1,
                            MonthInterval = 1,
                            Name = "Monthly Water"
                        },
                        new
                        {
                            Id = new Guid("bfb53864-8389-4038-9b49-60bbb1358158"),
                            AccountId = new Guid("8a276669-64f9-4057-a741-10b6b5ff92b0"),
                            Amount = 3350m,
                            CurrencyId = "USD",
                            Day = 1,
                            MonthInterval = 1,
                            Name = "Monthly Water"
                        },
                        new
                        {
                            Id = new Guid("cf28d12e-e51a-491c-ada8-cd6fcf840e88"),
                            AccountId = new Guid("e89ee340-96d2-49b2-a7c9-f444fb95c148"),
                            Amount = 3350m,
                            CurrencyId = "USD",
                            Day = 1,
                            MonthInterval = 1,
                            Name = "Monthly Water"
                        });
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Tenants.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2cee23f-3250-4b1b-93dc-87443b02dd89"),
                            Name = "North Augusta"
                        },
                        new
                        {
                            Id = new Guid("7ba3a979-5abf-407f-aee1-75e2d5522711"),
                            Name = "Aiken"
                        });
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Tenants.TenantHost", b =>
                {
                    b.Property<string>("Hostname")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Hostname");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantHosts");
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Tenants.TenantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name", "TenantId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99a3b0a6-0adb-4fee-b2cc-380ee21ea446"),
                            ConcurrencyStamp = "c4558764-0f55-4538-ae3a-ad6c8f8124dc",
                            Name = "Admin",
                            TenantId = new Guid("a2cee23f-3250-4b1b-93dc-87443b02dd89")
                        },
                        new
                        {
                            Id = new Guid("f94c10f9-69dd-459f-a2fe-3be09c2c4075"),
                            ConcurrencyStamp = "127fb553-75cd-4c9a-932f-b5b036d40505",
                            Name = "Manager",
                            TenantId = new Guid("a2cee23f-3250-4b1b-93dc-87443b02dd89")
                        },
                        new
                        {
                            Id = new Guid("191e5e91-0e14-460e-a481-2f00c72b8228"),
                            ConcurrencyStamp = "e9da379a-ccf0-4209-9460-555d013831b1",
                            Name = "Admin",
                            TenantId = new Guid("7ba3a979-5abf-407f-aee1-75e2d5522711")
                        },
                        new
                        {
                            Id = new Guid("52c71ae1-9b6b-4694-9ea8-e70501a8aca2"),
                            ConcurrencyStamp = "6bad7203-2f73-4ba7-92b8-98ee8ad95f3f",
                            Name = "Manager",
                            TenantId = new Guid("7ba3a979-5abf-407f-aee1-75e2d5522711")
                        });
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Tenants.TenantUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserName", "TenantId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39332843-d6dd-425f-8c5d-3ec565857059"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "893D41CD-4642-4542-B81C-E8368FA03906",
                            Email = "mdcasey@chabloom.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MDCASEY@CHABLOOM.COM",
                            NormalizedUserName = "MDCASEY@CHABLOOM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELYyWQtU3cVbIfdmk4LHrtYsKTiYVW7OAge27lolZ3I8D97OE4QQ6Yn4XwGhO8YPuQ==",
                            PhoneNumber = "+18036179564",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "C3KZM3I2WQCCAD7EVHRZQSGRFRX5MY3I",
                            TenantId = new Guid("a2cee23f-3250-4b1b-93dc-87443b02dd89"),
                            TwoFactorEnabled = false,
                            UserName = "mdcasey@chabloom.com"
                        },
                        new
                        {
                            Id = new Guid("dfb1359f-a11d-4de1-b8ac-ada45aef0b72"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "CB0FCA5D-D2F3-4D0B-8277-2091FED613B3",
                            Email = "mdcasey@chabloom.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MDCASEY@CHABLOOM.COM",
                            NormalizedUserName = "MDCASEY@CHABLOOM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELYyWQtU3cVbIfdmk4LHrtYsKTiYVW7OAge27lolZ3I8D97OE4QQ6Yn4XwGhO8YPuQ==",
                            PhoneNumber = "+18036179564",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "C3KZM3I2WQCCAD7EVHRZQSGRFRX5MY3I",
                            TenantId = new Guid("7ba3a979-5abf-407f-aee1-75e2d5522711"),
                            TwoFactorEnabled = false,
                            UserName = "mdcasey@chabloom.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("TenantRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "name",
                            ClaimValue = "Matthew Casey",
                            UserId = new Guid("39332843-d6dd-425f-8c5d-3ec565857059")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "name",
                            ClaimValue = "Matthew Casey",
                            UserId = new Guid("dfb1359f-a11d-4de1-b8ac-ada45aef0b72")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("TenantUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("39332843-d6dd-425f-8c5d-3ec565857059"),
                            RoleId = new Guid("99a3b0a6-0adb-4fee-b2cc-380ee21ea446")
                        },
                        new
                        {
                            UserId = new Guid("dfb1359f-a11d-4de1-b8ac-ada45aef0b72"),
                            RoleId = new Guid("191e5e91-0e14-460e-a481-2f00c72b8228")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("TenantUserTokens");
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Accounts.Account", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Accounts.UserAccount", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.TenantUser", "TenantUser")
                        .WithMany()
                        .HasForeignKey("TenantUserId");

                    b.Navigation("Account");

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Bills.Bill", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Accounts.Account", "Account")
                        .WithMany("Bills")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Bills.BillSchedule", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Accounts.Account", "Account")
                        .WithMany("BillSchedules")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Tenants.TenantHost", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.Tenant", "Tenant")
                        .WithMany("Addresses")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Tenants.TenantRole", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.Tenant", "Tenant")
                        .WithMany("Roles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Tenants.TenantUser", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.TenantRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.TenantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.TenantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.TenantRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.TenantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Chabloom.Billing.Backend.Models.Tenants.TenantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Accounts.Account", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("BillSchedules");
                });

            modelBuilder.Entity("Chabloom.Billing.Backend.Models.Tenants.Tenant", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
